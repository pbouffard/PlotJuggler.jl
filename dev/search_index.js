var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PlotJuggler","category":"page"},{"location":"#PlotJuggler","page":"Home","title":"PlotJuggler","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PlotJuggler.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PlotJuggler]","category":"page"},{"location":"#PlotJuggler.pjplot-Union{Tuple{T}, Tuple{Any, AbstractVector{T}}} where T<:(AbstractVector)","page":"Home","title":"PlotJuggler.pjplot","text":"pjplot(t, curves)\n\nStart a PlotJuggler session with t as the time variable and curves the data to plot against time. Each curve will be given a distinct color (up to 10, then the colors repeat) solid line.\n\nExamples\n\nFor convenience the curves argument can take several forms. The most common would be to pass a NamedTuple which will allow the names of the variables in the calling scope to be picked up as the curve names automatically:\n\nt = 0:0.1:5\nfreq = 2.0\na = cos.(2*pi/freq*t)\nb = sin.(2*pi/freq*t)\n\npjplot(t, (; a, b))\n\nIf a simple Vector (or compatible type) is passed in for the second argument then it will be plotted against time and named data1 in the plot:\n\npjplot(t, 2*t)\n\nIf a Vector of Vectors is passed in for the second argument then each one will be named as data1, data2, etc.:\n\npjplot(t, [t, 2*t, 4*t])\n\nIf the optional argument xy is set, then its value should be a NamedTuple. This will add a plot pane where the data vectors identified by the keys of this argument are plotted against one another. \n\npjplot(t, (; a, b); xy=(; a, b))\n\n# or equivalently\ncoords = (; a, b)\npjplot(t, coords; xy=coords)\n\n\n\n\n\n","category":"method"}]
}
